/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.7/samples
 */
static def gitHashAndBuildTime() {
    return "hash_id=" + getGitSHA() + " and publish_time=" + releaseTime()
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
}

static def getGitSHA() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

plugins {
    id "elasticsearch.esplugin" version "6.8.23"
}

group 'com.es.monitor.plugin'
version "${es_version}"
description 'Simple ElasticSearch monitor & metric Plugin'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'

esplugin {
    name "es-custom-metrics"
    description "plugin for ES monitor & metric Plugin"+gitHashAndBuildTime()
    classname "com.es.monitor.EsMetricsPlugin"
    licenseFile rootProject.file("LICENSE.txt")
    noticeFile rootProject.file("NOTICE.md")
    version "${plugin_version}"
}


// somehow esplugin will modify the jdk version(to 8) for compiling
//targetCompatibility = "${es_jdk}"
//sourceCompatibility = "${es_jdk}"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
   compileOnly "org.elasticsearch:elasticsearch:${es_version}"
  // compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.11'
  //  compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.11'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
}

tasks.dependencyLicenses.enabled(false)
//temporarily disable following task during developing
tasks.forbiddenApisMain.enabled(false)
tasks.forbiddenApisTest.enabled(false)
tasks.checkstyleMain.enabled(false)
tasks.licenseHeaders.enabled(false)
tasks.thirdPartyAudit.enabled(false)
tasks.checkstyleTest.enabled(false)
tasks.loggerUsageCheck.enabled(false)
tasks.testingConventions.enabled(false)

//copy to /config during integ test
/*integTestCluster {
    //extraConfigFile 'default_users.json', './build/resources/test/admin/default_users.json'
   // extraConfigFile 'default_roles.json', './build/resources/test/admin/default_roles.json'
    // true false
    // setting 'es.auth.plugin', true
    setting 'logger.org.elasticsearch.deprecation', 'error'
}*/

allprojects {
    tasks.withType(Javadoc).all { enabled = false }
    // ignore missing javadocs
    tasks.withType(Javadoc).configureEach { Javadoc javadoc ->
        // the -quiet here is because of a bug in gradle, in that adding a string option
        // by itself is not added to the options. By adding quiet, both this option and
        // the "value" -quiet is added, separated by a space. This is ok since the javadoc
        // command already adds -quiet, so we are just duplicating it
        // see https://discuss.gradle.org/t/add-custom-javadoc-option-that-does-not-take-an-argument/5959
        // javadoc.options.encoding = 'UTF8'
        javadoc.options.addStringOption('encoding', 'UTF-8')
        javadoc.options.addStringOption('charSet', 'UTF-8')
        javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet')
    }
    tasks.withType(JavaCompile).configureEach{JavaCompile  javaCompile ->
        // Try to turn them all off automatically
        javaCompile.options.compilerArgs << '-Xlint:none'
        javaCompile.options.compilerArgs << '-nowarn' // same as '-Xlint:none'

        // Turn them off manually
        javaCompile.options.compilerArgs << '-Xlint:-auxiliaryclass'
        javaCompile.options.compilerArgs << '-Xlint:-cast'
        javaCompile.options.compilerArgs << '-Xlint:-classfile'
        javaCompile.options.compilerArgs << '-Xlint:-deprecation'
        javaCompile.options.compilerArgs << '-Xlint:-dep-ann'
        javaCompile.options.compilerArgs << '-Xlint:-divzero'
        javaCompile.options.compilerArgs << '-Xlint:-empty'
        javaCompile.options.compilerArgs << '-Xlint:-fallthrough'
        javaCompile.options.compilerArgs << '-Xlint:-finally'
        javaCompile.options.compilerArgs << '-Xlint:-options'
        javaCompile.options.compilerArgs << '-Xlint:-overloads'
        javaCompile.options.compilerArgs << '-Xlint:-overrides'
        javaCompile.options.compilerArgs << '-Xlint:-path'
        javaCompile.options.compilerArgs << '-Xlint:-processing'
        javaCompile.options.compilerArgs << '-Xlint:-rawtypes'
        javaCompile.options.compilerArgs << '-Xlint:-serial'
        javaCompile.options.compilerArgs << '-Xlint:-static'
        javaCompile.options.compilerArgs << '-Xlint:-try'
        javaCompile.options.compilerArgs << '-Xlint:-unchecked'
        javaCompile.options.compilerArgs << '-Xlint:-varargs'
    }
}